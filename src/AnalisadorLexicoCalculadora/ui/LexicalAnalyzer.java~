/* The following code was generated by JFlex 1.6.1 */

package AnalisadorLexicoCalculadora.ui;
import AnalisadorLexicoCalculadora.classes.ItemLexico;
import java.util.ArrayList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/AnalisadorLexicoCalculadora/ui/language.lex</tt>
 */
class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\50\1\46\1\43\1\0\1\0\1\42\16\50\4\0\1\46\3\0"+
    "\1\47\3\0\1\40\1\41\1\35\1\33\1\32\1\34\1\0\1\36"+
    "\12\37\1\30\1\31\1\27\1\26\1\25\2\0\32\47\4\0\1\47"+
    "\1\0\1\17\1\1\1\22\1\6\1\2\1\7\1\3\1\11\1\4"+
    "\2\47\1\12\1\24\1\5\1\14\1\21\1\47\1\20\1\13\1\10"+
    "\1\23\1\16\1\15\3\47\1\44\1\46\1\45\1\0\6\50\1\50"+
    "\32\50\2\0\4\47\4\0\1\47\2\0\1\50\7\0\1\47\4\0"+
    "\1\47\5\0\27\47\1\0\37\47\1\0\u01ca\47\4\0\14\47\16\0"+
    "\5\47\7\0\1\47\1\0\1\47\21\0\160\50\5\47\1\0\2\47"+
    "\2\0\4\47\10\0\1\47\1\0\3\47\1\0\1\47\1\0\24\47"+
    "\1\0\123\47\1\0\213\47\1\0\5\50\2\0\236\47\11\0\46\47"+
    "\2\0\1\47\7\0\47\47\7\0\1\47\1\0\55\50\1\0\1\50"+
    "\1\0\2\50\1\0\2\50\1\0\1\50\10\0\33\47\5\0\3\47"+
    "\15\0\5\50\6\0\1\47\4\0\13\50\5\0\53\47\37\50\4\0"+
    "\2\47\1\50\143\47\1\0\1\47\10\50\1\0\6\50\2\47\2\50"+
    "\1\0\4\50\2\47\12\50\3\47\2\0\1\47\17\0\1\50\1\47"+
    "\1\50\36\47\33\50\2\0\131\47\13\50\1\47\16\0\12\50\41\47"+
    "\11\50\2\47\4\0\1\47\5\0\26\47\4\50\1\47\11\50\1\47"+
    "\3\50\1\47\5\50\22\0\31\47\3\50\104\0\1\47\1\0\13\47"+
    "\67\0\33\50\1\0\4\50\66\47\3\50\1\47\22\50\1\47\7\50"+
    "\12\47\2\50\2\0\12\50\1\0\7\47\1\0\7\47\1\0\3\50"+
    "\1\0\10\47\2\0\2\47\2\0\26\47\1\0\7\47\1\0\1\47"+
    "\3\0\4\47\2\0\1\50\1\47\7\50\2\0\2\50\2\0\3\50"+
    "\1\47\10\0\1\50\4\0\2\47\1\0\3\47\2\50\2\0\12\50"+
    "\4\47\7\0\1\47\5\0\3\50\1\0\6\47\4\0\2\47\2\0"+
    "\26\47\1\0\7\47\1\0\2\47\1\0\2\47\1\0\2\47\2\0"+
    "\1\50\1\0\5\50\4\0\2\50\2\0\3\50\3\0\1\50\7\0"+
    "\4\47\1\0\1\47\7\0\14\50\3\47\1\50\13\0\3\50\1\0"+
    "\11\47\1\0\3\47\1\0\26\47\1\0\7\47\1\0\2\47\1\0"+
    "\5\47\2\0\1\50\1\47\10\50\1\0\3\50\1\0\3\50\2\0"+
    "\1\47\17\0\2\47\2\50\2\0\12\50\1\0\1\47\17\0\3\50"+
    "\1\0\10\47\2\0\2\47\2\0\26\47\1\0\7\47\1\0\2\47"+
    "\1\0\5\47\2\0\1\50\1\47\7\50\2\0\2\50\2\0\3\50"+
    "\10\0\2\50\4\0\2\47\1\0\3\47\2\50\2\0\12\50\1\0"+
    "\1\47\20\0\1\50\1\47\1\0\6\47\3\0\3\47\1\0\4\47"+
    "\3\0\2\47\1\0\1\47\1\0\2\47\3\0\2\47\3\0\3\47"+
    "\3\0\14\47\4\0\5\50\3\0\3\50\1\0\4\50\2\0\1\47"+
    "\6\0\1\50\16\0\12\50\11\0\1\47\7\0\3\50\1\0\10\47"+
    "\1\0\3\47\1\0\27\47\1\0\12\47\1\0\5\47\3\0\1\47"+
    "\7\50\1\0\3\50\1\0\4\50\7\0\2\50\1\0\2\47\6\0"+
    "\2\47\2\50\2\0\12\50\22\0\2\50\1\0\10\47\1\0\3\47"+
    "\1\0\27\47\1\0\12\47\1\0\5\47\2\0\1\50\1\47\7\50"+
    "\1\0\3\50\1\0\4\50\7\0\2\50\7\0\1\47\1\0\2\47"+
    "\2\50\2\0\12\50\1\0\2\47\17\0\2\50\1\0\10\47\1\0"+
    "\3\47\1\0\51\47\2\0\1\47\7\50\1\0\3\50\1\0\4\50"+
    "\1\47\10\0\1\50\10\0\2\47\2\50\2\0\12\50\12\0\6\47"+
    "\2\0\2\50\1\0\22\47\3\0\30\47\1\0\11\47\1\0\1\47"+
    "\2\0\7\47\3\0\1\50\4\0\6\50\1\0\1\50\1\0\10\50"+
    "\22\0\2\50\15\0\60\47\1\50\2\47\7\50\4\0\10\47\10\50"+
    "\1\0\12\50\47\0\2\47\1\0\1\47\2\0\2\47\1\0\1\47"+
    "\2\0\1\47\6\0\4\47\1\0\7\47\1\0\3\47\1\0\1\47"+
    "\1\0\1\47\2\0\2\47\1\0\4\47\1\50\2\47\6\50\1\0"+
    "\2\50\1\47\2\0\5\47\1\0\1\47\1\0\6\50\2\0\12\50"+
    "\2\0\4\47\40\0\1\47\27\0\2\50\6\0\12\50\13\0\1\50"+
    "\1\0\1\50\1\0\1\50\4\0\2\50\10\47\1\0\44\47\4\0"+
    "\24\50\1\0\2\50\5\47\13\50\1\0\44\50\11\0\1\50\71\0"+
    "\53\47\24\50\1\47\12\50\6\0\6\47\4\50\4\47\3\50\1\47"+
    "\3\50\2\47\7\50\3\47\4\50\15\47\14\50\1\47\17\50\2\0"+
    "\46\47\1\0\1\47\5\0\1\47\2\0\53\47\1\0\u014d\47\1\0"+
    "\4\47\2\0\7\47\1\0\1\47\1\0\4\47\2\0\51\47\1\0"+
    "\4\47\2\0\41\47\1\0\4\47\2\0\7\47\1\0\1\47\1\0"+
    "\4\47\2\0\17\47\1\0\71\47\1\0\4\47\2\0\103\47\2\0"+
    "\3\50\40\0\20\47\20\0\125\47\14\0\u026c\47\2\0\21\47\1\0"+
    "\32\47\5\0\113\47\3\0\3\47\17\0\15\47\1\0\4\47\3\50"+
    "\13\0\22\47\3\50\13\0\22\47\2\50\14\0\15\47\1\0\3\47"+
    "\1\0\2\50\14\0\64\47\40\50\3\0\1\47\3\0\2\47\1\50"+
    "\2\0\12\50\41\0\3\50\2\0\12\50\6\0\130\47\10\0\51\47"+
    "\1\50\1\47\5\0\106\47\12\0\35\47\3\0\14\50\4\0\14\50"+
    "\12\0\12\50\36\47\2\0\5\47\13\0\54\47\4\0\21\50\7\47"+
    "\2\50\6\0\12\50\46\0\27\47\5\50\4\0\65\47\12\50\1\0"+
    "\35\50\2\0\13\50\6\0\12\50\15\0\1\47\130\0\5\50\57\47"+
    "\21\50\7\47\4\0\12\50\21\0\11\50\14\0\3\50\36\47\15\50"+
    "\2\47\12\50\54\47\16\50\14\0\44\47\24\50\10\0\12\50\3\0"+
    "\3\47\12\50\44\47\122\0\3\50\1\0\25\50\4\47\1\50\4\47"+
    "\3\50\2\47\11\0\300\47\47\50\25\0\4\50\u0116\47\2\0\6\47"+
    "\2\0\46\47\2\0\6\47\2\0\10\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\37\47\2\0\65\47\1\0\7\47\1\0\1\47"+
    "\3\0\3\47\1\0\7\47\3\0\4\47\2\0\6\47\4\0\15\47"+
    "\5\0\3\47\1\0\7\47\16\0\5\50\30\0\1\0\1\0\5\50"+
    "\20\0\2\47\23\0\1\47\13\0\5\50\5\0\6\50\1\0\1\47"+
    "\15\0\1\47\20\0\15\47\3\0\33\47\25\0\15\50\4\0\1\50"+
    "\3\0\14\50\21\0\1\47\4\0\1\47\2\0\12\47\1\0\1\47"+
    "\3\0\5\47\6\0\1\47\1\0\1\47\1\0\1\47\1\0\4\47"+
    "\1\0\13\47\2\0\4\47\5\0\5\47\4\0\1\47\21\0\51\47"+
    "\u0a77\0\57\47\1\0\57\47\1\0\205\47\6\0\4\47\3\50\2\47"+
    "\14\0\46\47\1\0\1\47\5\0\1\47\2\0\70\47\7\0\1\47"+
    "\17\0\1\50\27\47\11\0\7\47\1\0\7\47\1\0\7\47\1\0"+
    "\7\47\1\0\7\47\1\0\7\47\1\0\7\47\1\0\7\47\1\0"+
    "\40\50\57\0\1\47\u01d5\0\3\47\31\0\11\47\6\50\1\0\5\47"+
    "\2\0\5\47\4\0\126\47\2\0\2\50\2\0\3\47\1\0\132\47"+
    "\1\0\4\47\5\0\51\47\3\0\136\47\21\0\33\47\65\0\20\47"+
    "\u0200\0\u19b6\47\112\0\u51cd\47\63\0\u048d\47\103\0\56\47\2\0\u010d\47"+
    "\3\0\20\47\12\50\2\47\24\0\57\47\1\50\4\0\12\50\1\0"+
    "\31\47\7\0\1\50\120\47\2\50\45\0\11\47\2\0\147\47\2\0"+
    "\4\47\1\0\4\47\14\0\13\47\115\0\12\47\1\50\3\47\1\50"+
    "\4\47\1\50\27\47\5\50\20\0\1\47\7\0\64\47\14\0\2\50"+
    "\62\47\21\50\13\0\12\50\6\0\22\50\6\47\3\0\1\47\4\0"+
    "\12\50\34\47\10\50\2\0\27\47\15\50\14\0\35\47\3\0\4\50"+
    "\57\47\16\50\16\0\1\47\12\50\46\0\51\47\16\50\11\0\3\47"+
    "\1\50\10\47\2\50\2\0\12\50\6\0\27\47\3\0\1\47\1\50"+
    "\4\0\60\47\1\50\1\47\3\50\2\47\2\50\5\47\2\50\1\47"+
    "\1\50\1\47\30\0\3\47\2\0\13\47\5\50\2\0\3\47\2\50"+
    "\12\0\6\47\2\0\6\47\2\0\6\47\11\0\7\47\1\0\7\47"+
    "\221\0\43\47\10\50\1\0\2\50\2\0\12\50\6\0\u2ba4\47\14\0"+
    "\27\47\4\0\61\47\u2104\0\u016e\47\2\0\152\47\46\0\7\47\14\0"+
    "\5\47\5\0\1\47\1\50\12\47\1\0\15\47\1\0\5\47\1\0"+
    "\1\47\1\0\2\47\1\0\2\47\1\0\154\47\41\0\u016b\47\22\0"+
    "\100\47\2\0\66\47\50\0\15\47\3\0\20\50\20\0\7\50\14\0"+
    "\2\47\30\0\3\47\31\0\1\47\6\0\5\47\1\0\207\47\2\0"+
    "\1\50\4\0\1\47\13\0\12\50\7\0\32\47\4\0\1\47\1\0"+
    "\32\47\13\0\131\47\3\0\6\47\2\0\6\47\2\0\6\47\2\0"+
    "\3\47\3\0\2\47\3\0\2\47\22\0\3\50\4\0\14\47\1\0"+
    "\32\47\1\0\23\47\1\0\2\47\1\0\17\47\2\0\16\47\42\0"+
    "\173\47\105\0\65\47\210\0\1\50\202\0\35\47\3\0\61\47\57\0"+
    "\37\47\21\0\33\47\65\0\36\47\2\0\44\47\4\0\10\47\1\0"+
    "\5\47\52\0\236\47\2\0\12\50\u0356\0\6\47\2\0\1\47\1\0"+
    "\54\47\1\0\2\47\3\0\1\47\2\0\27\47\252\0\26\47\12\0"+
    "\32\47\106\0\70\47\6\0\2\47\100\0\1\47\3\50\1\0\2\50"+
    "\5\0\4\50\4\47\1\0\3\47\1\0\33\47\4\0\3\50\4\0"+
    "\1\50\40\0\35\47\203\0\66\47\12\0\26\47\12\0\23\47\215\0"+
    "\111\47\u03b7\0\3\50\65\47\17\50\37\0\12\50\20\0\3\50\55\47"+
    "\13\50\2\0\1\50\22\0\31\47\7\0\12\50\6\0\3\50\44\47"+
    "\16\50\1\0\12\50\100\0\3\50\60\47\16\50\4\47\13\0\12\50"+
    "\u04a6\0\53\47\15\50\10\0\12\50\u0936\0\u036f\47\221\0\143\47\u0b9d\0"+
    "\u042f\47\u33d1\0\u0239\47\u04c7\0\105\47\13\0\1\47\56\50\20\0\4\50"+
    "\15\47\u4060\0\2\47\u2163\0\5\50\3\0\26\50\2\0\7\50\36\0"+
    "\4\50\224\0\3\50\u01bb\0\125\47\1\0\107\47\1\0\2\47\2\0"+
    "\1\47\2\0\2\47\2\0\4\47\1\0\14\47\1\0\1\47\1\0"+
    "\7\47\1\0\101\47\1\0\4\47\2\0\10\47\1\0\7\47\1\0"+
    "\34\47\1\0\4\47\1\0\5\47\1\0\1\47\3\0\7\47\1\0"+
    "\u0154\47\2\0\31\47\1\0\31\47\1\0\37\47\1\0\31\47\1\0"+
    "\37\47\1\0\31\47\1\0\37\47\1\0\31\47\1\0\37\47\1\0"+
    "\31\47\1\0\10\47\2\0\62\50\u1600\0\4\47\1\0\33\47\1\0"+
    "\2\47\1\0\1\47\2\0\1\47\1\0\12\47\1\0\4\47\1\0"+
    "\1\47\1\0\1\47\6\0\1\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\3\47\1\0\2\47\1\0\1\47\2\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0\2\47\1\0"+
    "\1\47\2\0\4\47\1\0\7\47\1\0\4\47\1\0\4\47\1\0"+
    "\1\47\1\0\12\47\1\0\21\47\5\0\3\47\1\0\5\47\1\0"+
    "\21\47\u1144\0\ua6d7\47\51\0\u1035\47\13\0\336\47\u3fe2\0\u021e\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\50\36\0\140\50\200\0\360\50\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\14\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\1\1\21\5\2\1\22\2\2\1\23\1\2"+
    "\1\24\4\2\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\2\2\1\32\1\2\1\33\1\34\1\14\2\2\1\35"+
    "\1\36\1\2\2\31\2\2\1\37\1\40\3\2\1\41"+
    "\1\2\1\42\5\2\1\43\1\44\2\2\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\51"+
    "\0\u0267\0\u0290\0\51\0\51\0\51\0\51\0\51\0\u02b9"+
    "\0\u02e2\0\51\0\51\0\u030b\0\51\0\u0334\0\51\0\u035d"+
    "\0\u0386\0\u03af\0\u03d8\0\u0401\0\244\0\u042a\0\u0453\0\244"+
    "\0\u047c\0\244\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\51\0\51"+
    "\0\51\0\51\0\u0549\0\u0572\0\u059b\0\u05c4\0\244\0\u05ed"+
    "\0\244\0\244\0\244\0\u0616\0\u063f\0\244\0\244\0\u0668"+
    "\0\u0691\0\51\0\u06ba\0\u06e3\0\244\0\244\0\u070c\0\u0735"+
    "\0\u075e\0\244\0\u0787\0\244\0\u07b0\0\u07d9\0\u0802\0\u082b"+
    "\0\u0854\0\244\0\244\0\u087d\0\u08a6\0\244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\5"+
    "\1\11\3\5\1\12\1\13\1\14\1\15\1\5\1\16"+
    "\3\5\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\2\1\37\1\5\1\2\52\0\1\5\1\40"+
    "\11\5\1\41\10\5\12\0\1\5\7\0\2\5\1\0"+
    "\4\5\1\42\4\5\1\43\12\5\12\0\1\5\7\0"+
    "\2\5\1\0\24\5\12\0\1\5\7\0\2\5\1\0"+
    "\4\5\1\44\1\5\1\45\15\5\12\0\1\5\7\0"+
    "\2\5\1\0\13\5\1\46\10\5\12\0\1\5\7\0"+
    "\2\5\1\0\3\5\1\47\7\5\1\50\10\5\12\0"+
    "\1\5\7\0\2\5\1\0\10\5\1\51\13\5\12\0"+
    "\1\5\7\0\2\5\1\0\17\5\1\52\4\5\12\0"+
    "\1\5\7\0\2\5\1\0\10\5\1\53\13\5\12\0"+
    "\1\5\7\0\2\5\1\0\16\5\1\54\5\5\12\0"+
    "\1\5\7\0\2\5\1\0\4\5\1\55\17\5\12\0"+
    "\1\5\7\0\2\5\1\0\17\5\1\56\4\5\12\0"+
    "\1\5\7\0\2\5\26\0\1\57\47\0\1\60\1\61"+
    "\50\0\1\62\60\0\1\63\51\0\1\31\54\0\1\35"+
    "\5\0\35\64\1\0\13\64\1\0\2\5\1\65\21\5"+
    "\12\0\1\5\7\0\2\5\1\0\13\5\1\66\10\5"+
    "\12\0\1\5\7\0\2\5\1\0\5\5\1\67\16\5"+
    "\12\0\1\5\7\0\2\5\1\0\12\5\1\70\11\5"+
    "\12\0\1\5\7\0\2\5\1\0\7\5\1\71\14\5"+
    "\12\0\1\5\7\0\2\5\1\0\7\5\1\72\14\5"+
    "\12\0\1\5\7\0\2\5\1\0\15\5\1\73\6\5"+
    "\12\0\1\5\7\0\2\5\1\0\1\5\1\74\22\5"+
    "\12\0\1\5\7\0\2\5\1\0\3\5\1\75\20\5"+
    "\12\0\1\5\7\0\2\5\1\0\17\5\1\76\4\5"+
    "\12\0\1\5\7\0\2\5\1\0\5\5\1\77\16\5"+
    "\12\0\1\5\7\0\2\5\1\0\13\5\1\100\10\5"+
    "\12\0\1\5\7\0\2\5\42\63\1\101\1\102\5\63"+
    "\45\64\1\102\3\64\1\0\3\5\1\103\20\5\12\0"+
    "\1\5\7\0\2\5\1\0\11\5\1\104\12\5\12\0"+
    "\1\5\7\0\2\5\1\0\1\5\1\105\22\5\12\0"+
    "\1\5\7\0\2\5\1\0\4\5\1\106\17\5\12\0"+
    "\1\5\7\0\2\5\1\0\11\5\1\107\12\5\12\0"+
    "\1\5\7\0\2\5\1\0\2\5\1\110\16\5\1\111"+
    "\2\5\12\0\1\5\7\0\2\5\43\0\1\102\6\0"+
    "\4\5\1\112\17\5\12\0\1\5\7\0\2\5\1\0"+
    "\1\5\1\113\22\5\12\0\1\5\7\0\2\5\1\0"+
    "\1\5\1\114\22\5\12\0\1\5\7\0\2\5\1\0"+
    "\17\5\1\115\4\5\12\0\1\5\7\0\2\5\1\0"+
    "\1\5\1\116\22\5\12\0\1\5\7\0\2\5\1\0"+
    "\16\5\1\117\5\5\12\0\1\5\7\0\2\5\1\0"+
    "\16\5\1\120\5\5\12\0\1\5\7\0\2\5\1\0"+
    "\5\5\1\121\16\5\12\0\1\5\7\0\2\5\1\0"+
    "\4\5\1\122\17\5\12\0\1\5\7\0\2\5\1\0"+
    "\23\5\1\123\12\0\1\5\7\0\2\5\1\0\22\5"+
    "\1\124\1\5\12\0\1\5\7\0\2\5\1\0\17\5"+
    "\1\125\4\5\12\0\1\5\7\0\2\5\1\0\1\5"+
    "\1\126\22\5\12\0\1\5\7\0\2\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2255];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\2\1\5\11\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\17\1\4\11\1\1\1\0"+
    "\15\1\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

//private void imprimir(String descricao, String lexema) {
//System.out.println(lexema + " - " + descricao);
//descricoes.add(descricao);
//lexemas.add(lexema);
//}

private void add(String token){
    ItemLexico item = new ItemLexico();
    item.setLexema(yytext());
    item.setToken(token);
    item.setLinha(yyline);
    item.setColuna_inicio(yycolumn);   
    item.setColuna_fim(yycolumn + yylength());

    itens.add(item);
}

//Vamos colorir o código-fonte, se você digitar a cor, o texto do token vai ser colorido
//com a cor especificada. 
private void escrever(String cor){
	if(cor != null && !cor.equals("")){
		codigoFonteColorido += "<span style=\"color:"+cor+"\"><b>"+yytext()+"</span></b>";
	}
	else{
		codigoFonteColorido += yytext();
	}
}


private ArrayList<ItemLexico> itens = new ArrayList<>();
private String codigoFonteColorido = "";

public String getCodigoFonteColorido(){
	return codigoFonteColorido;
}

public void setCodigoFonteColorido(String codigo){
	codigoFonteColorido = codigo;
}

public ArrayList<ItemLexico> getItens() {
return itens;
}

public void setItens(ArrayList<ItemLexico> itens) {
this.itens = itens;
}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2838) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { add("DESCONHECIDO_ENTRADA"); escrever("red");
            }
          case 38: break;
          case 2: 
            { add("IDENTIFICADOR"); escrever("");
            }
          case 39: break;
          case 3: 
            { add("SIMBOLOS_ESPECIAIS_MAIOR_QUE"); escrever("black");
            }
          case 40: break;
          case 4: 
            { add("SIMBOLOS_ESPECIAIS_IGUAL"); escrever("black");
            }
          case 41: break;
          case 5: 
            { add("SIMBOLOS_ESPECIAIS_MENOR_QUE"); escrever("black");
            }
          case 42: break;
          case 6: 
            { add("SIMBOLOS_ESPECIAIS_DOIS_PONTOS"); escrever("black");
            }
          case 43: break;
          case 7: 
            { add("SIMBOLOS_ESPECIAIS_PONTO_E_VIRGULA"); escrever("black");
            }
          case 44: break;
          case 8: 
            { add("SIMBOLOS_ESPECIAIS_VIRGULA"); escrever("black");
            }
          case 45: break;
          case 9: 
            { add("OPERADOR_MATEMATICO_SOMA"); escrever("black");
            }
          case 46: break;
          case 10: 
            { add("OPERADOR_MATEMATICO_SUBTRACAO"); escrever("black");
            }
          case 47: break;
          case 11: 
            { add("OPERADOR_MATEMATICO_MULTIPLICACAO "); escrever("black");
            }
          case 48: break;
          case 12: 
            { add("OPERADOR_MATEMATICO_DIVISAO "); escrever("black");
            }
          case 49: break;
          case 13: 
            { add("NUMERO_INTEIRO"); escrever("");
            }
          case 50: break;
          case 14: 
            { add("ABRE_PARENTESES"); escrever("");
            }
          case 51: break;
          case 15: 
            { add("FECHA_PARENTESES"); escrever("");
            }
          case 52: break;
          case 16: 
            { escrever("");
            }
          case 53: break;
          case 17: 
            { 
            }
          case 54: break;
          case 18: 
            { add("PALAVRA_RESERVADA_IF"); escrever("blue");
            }
          case 55: break;
          case 19: 
            { add("PALAVRA_RESERVADA_DO"); escrever("blue");
            }
          case 56: break;
          case 20: 
            { add("OPERADOR_LOGICO_OR "); escrever("black");
            }
          case 57: break;
          case 21: 
            { add("SIMBOLOS_ESPECIAIS_MAIOR_OU_IGUAL"); escrever("black");
            }
          case 58: break;
          case 22: 
            { add("SIMBOLOS_ESPECIAIS_DIFERENTE"); escrever("black");
            }
          case 59: break;
          case 23: 
            { add("SIMBOLOS_ESPECIAIS_MENOR_OU_IGUAL"); escrever("black");
            }
          case 60: break;
          case 24: 
            { add("SIMBOLOS_ESPECIAIS_ATRIBUICAO"); escrever("black");
            }
          case 61: break;
          case 25: 
            { add("COMENTARIO"); escrever("gray");
            }
          case 62: break;
          case 26: 
            { add("PALAVRA_RESERVADA_END"); escrever("blue");
            }
          case 63: break;
          case 27: 
            { add("TIPO_VARIAVEL_INT"); escrever("red");
            }
          case 64: break;
          case 28: 
            { add("OPERADOR_LOGICO_NOT "); escrever("black");
            }
          case 65: break;
          case 29: 
            { add("PALAVRA_RESERVADA_VAR"); escrever("blue");
            }
          case 66: break;
          case 30: 
            { add("OPERADOR_LOGICO_AND "); escrever("black");
            }
          case 67: break;
          case 31: 
            { add("PALAVRA_RESERVADA_ELSE"); escrever("blue");
            }
          case 68: break;
          case 32: 
            { add("PALAVRA_RESERVADA_THEN"); escrever("blue");
            }
          case 69: break;
          case 33: 
            { add("PALAVRA_RESERVADA_BEGIN"); escrever("blue");
            }
          case 70: break;
          case 34: 
            { add("PALAVRA_RESERVADA_WHILE"); escrever("blue");
            }
          case 71: break;
          case 35: 
            { add("TIPO_VARIAVEL_BOOLEAN"); escrever("red");
            }
          case 72: break;
          case 36: 
            { add("PALAVRA_RESERVADA_PROGRAM"); escrever("blue");
            }
          case 73: break;
          case 37: 
            { add("PALAVRA_RESERVADA_PROCEDURE"); escrever("blue");
            }
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
