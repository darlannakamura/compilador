package AnalisadorLexicoCalculadora.ui;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;


parser code {:
    public LexicalAnalyzer scanner;
    private ArrayList<ItemSintatico> itensSintaticos = new ArrayList();

    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s,sf);
        scanner = (LexicalAnalyzer) getScanner();
        s = scanner;
    }


    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }

    public void syntax_error(String mensagem){
        System.out.println(mensagem + " Linha: " + String.valueOf(scanner.getYyline()));
    }


    

    /**
     * @return the itensSintaticos
     */
    public ArrayList<ItemSintatico> getItensSintaticos() {
        return itensSintaticos;
    }

    interface Expressao_Interface { int run(TabelaSimbolos tabela); }
    interface Condicao_Interface { boolean test(TabelaSimbolos tabela); }
    interface Comando_Interface { void run(TabelaSimbolos tabela); }
    

:};


terminal PALAVRA_RESERVADA_BEGIN, PALAVRA_RESERVADA_END, PALAVRA_RESERVADA_IF, PALAVRA_RESERVADA_THEN;
terminal PALAVRA_RESERVADA_ELSE, PALAVRA_RESERVADA_DO, PALAVRA_RESERVADA_WHILE, PALAVRA_RESERVADA_VAR;
terminal PALAVRA_RESERVADA_PROCEDURE, PALAVRA_RESERVADA_PROGRAM, SIMBOLOS_ESPECIAIS_MAIOR_OU_IGUAL;
terminal SIMBOLOS_ESPECIAIS_MAIOR_QUE, SIMBOLOS_ESPECIAIS_DIFERENTE, SIMBOLOS_ESPECIAIS_MENOR_OU_IGUAL;
terminal SIMBOLOS_ESPECIAIS_MENOR_QUE, SIMBOLOS_ESPECIAIS_ATRIBUICAO, SIMBOLOS_ESPECIAIS_IGUAL;
terminal SIMBOLOS_ESPECIAIS_PONTO_E_VIRGULA, SIMBOLOS_ESPECIAIS_VIRGULA, SIMBOLOS_ESPECIAIS_DOIS_PONTOS;
terminal OPERADOR_LOGICO_AND, OPERADOR_LOGICO_OR, OPERADOR_LOGICO_NOT, OPERADOR_MATEMATICO_SOMA;
terminal OPERADOR_MATEMATICO_SUBTRACAO, OPERADOR_MATEMATICO_MULTIPLICACAO, OPERADOR_MATEMATICO_DIVISAO;
terminal TIPO_VARIAVEL_INT, TIPO_VARIAVEL_BOOLEAN, ABRE_PARENTESES, FECHA_PARENTESES;
terminal FIM;
terminal COMENTARIO, DESCONHECIDO;
terminal String IDENTIFICADOR;
terminal Integer NUMERO_INTEIRO;
terminal String VALOR_BOOLEANO;

non terminal Programa program;
non terminal Bloco bloco;
non terminal ParteDeclaracaoVariaveis parte_de_declaracoes_de_variaveis;
non terminal DeclaracaoVariaveis declaracao_de_variavel;
non terminal Tipo tipo;
non terminal ListaIdentificadores lista_de_identificadores;
non terminal ParteDeclaracaoSubrotinas parte_de_declaracoes_de_subrotinas;
non terminal DeclaracaoProcedimento declaracao_de_procedimento;
non terminal parametros_formais;
non terminal SecaoParametrosFormais secao_de_parametros_formais;
non terminal SecaoParametrosFormais2 secao_de_parametros_formais2;
non terminal ComandoComposto comando_composto;
non terminal Comandos comandos;
non terminal Comando comando;
non terminal Atribuicao atribuicao;
non terminal Expressao expressao;
non terminal ExpressaoSimples expressao_simples;
non terminal RepeticaoTermo repeticao_termo;
non terminal Termo termo;
non terminal RepeticaoFator repeticao_fator;
non terminal Fator fator;
non terminal ComandoCondicionalCasado comando_condicional_casado;
non terminal Casado casado;
non terminal NaoCasado nao_casado;
non terminal ComandoRepetitivoCasado comando_repetitivo_casado;
non terminal ComandoRepetitivoNaoCasado comando_repetitivo_nao_casado;
non terminal RepeticaoFator2 repeticao_fator2;
non terminal RepeticaoTermo2 repeticao_termo2;
non terminal ChamadaProcedimento chamada_de_procedimento;
non terminal ListaExpressoes lista_de_expressoes;

start with program;

//DECLARAÇÕES

program ::= 
            PALAVRA_RESERVADA_PROGRAM 
            IDENTIFICADOR:id  
            SIMBOLOS_ESPECIAIS_PONTO_E_VIRGULA 
            bloco:b
            FIM
            {:  Programa p = new Programa(b, id);
                            p.exec();
            :}
        ;

bloco ::= 
          parte_de_declaracoes_de_variaveis:pdv
          parte_de_declaracoes_de_subrotinas:pds
          comando_composto:cc
          {: RESULT = new Bloco(pdv,pds,cc); :}
        | parte_de_declaracoes_de_subrotinas:pds comando_composto:cc {: RESULT = new Bloco(null,pds,cc); :}
        | parte_de_declaracoes_de_variaveis:pdv comando_composto:cc  {: RESULT = new Bloco(pdv,null,cc); :}
        | comando_composto:cc {: RESULT = new Bloco(null,null,cc); :}
    ;

parte_de_declaracoes_de_variaveis ::= 
                                        parte_de_declaracoes_de_variaveis:pdv 
                                        declaracao_de_variavel:dv 
                                        {: RESULT = pdv.add(dv); :}
                                        | declaracao_de_variavel:dv
                                        {: RESULT = new ParteDeclaracaoVariaveis(dv); :}
                                    ;

declaracao_de_variavel ::= 
                        error {: syntax_error("Erro na declaração de variável."); :} 
                        | tipo:t lista_de_identificadores:li SIMBOLOS_ESPECIAIS_PONTO_E_VIRGULA
                          {: RESULT = new DeclaracaoVariaveis(t,li); :}
                    ;

tipo ::= 
          TIPO_VARIAVEL_INT {: RESULT = new Tipo("int"); :}
        | TIPO_VARIAVEL_BOOLEAN {: RESULT = new Tipo("boolean"); :}
    ;

lista_de_identificadores ::= 
                        lista_de_identificadores:li
                        SIMBOLOS_ESPECIAIS_VIRGULA
                        IDENTIFICADOR:id
                        {: li.add(id); RESULT = li; :}
                        | IDENTIFICADOR:id
                          {: RESULT = new ListaIdentificadores(id); :}
                        ;

parte_de_declaracoes_de_subrotinas ::= 
                                        parte_de_declaracoes_de_subrotinas 
                                        declaracao_de_procedimento 
                                        | declaracao_de_procedimento
                                    ;

declaracao_de_procedimento ::= 
                                PALAVRA_RESERVADA_PROCEDURE 
                                IDENTIFICADOR 
                                parametros_formais 
                                SIMBOLOS_ESPECIAIS_PONTO_E_VIRGULA 
                                bloco 
                            ;

parametros_formais ::= 
                        ABRE_PARENTESES 
                        secao_de_parametros_formais 
                        FECHA_PARENTESES
                    ;

secao_de_parametros_formais ::= 
                                secao_de_parametros_formais:spf 
                                SIMBOLOS_ESPECIAIS_PONTO_E_VIRGULA  
                                secao_de_parametros_formais2:spf2 
                                {:spf.add(spf2); RESULT = spf; :} 

                                | secao_de_parametros_formais2:spf2
                                {: RESULT = new SecaoParametrosFormais(spf2); :} 
                            ;

secao_de_parametros_formais2 ::=  
                                        PALAVRA_RESERVADA_VAR
                                        lista_de_identificadores:li 
                                        SIMBOLOS_ESPECIAIS_DOIS_PONTOS 
                                        TIPO_VARIAVEL_BOOLEAN 
                                        {: RESULT = new SecaoParametrosFormais2(true,"boolean",li); :}

                                        | PALAVRA_RESERVADA_VAR
                                        lista_de_identificadores:li
                                        SIMBOLOS_ESPECIAIS_DOIS_PONTOS 
                                        TIPO_VARIAVEL_INT
                                        {: RESULT = new SecaoParametrosFormais2(true,"int",li); :}

                                        |lista_de_identificadores:li 
                                        SIMBOLOS_ESPECIAIS_DOIS_PONTOS 
                                        TIPO_VARIAVEL_INT
                                        {: RESULT = new SecaoParametrosFormais2("int", li); :}

                                        | lista_de_identificadores:li
                                        SIMBOLOS_ESPECIAIS_DOIS_PONTOS 
                                        TIPO_VARIAVEL_BOOLEAN
                                        {: RESULT = new SecaoParametrosFormais2("boolean", li); :}
                                ;

//COMANDOS

comando_composto ::= 
                        PALAVRA_RESERVADA_BEGIN 
                        comandos:c 
                        PALAVRA_RESERVADA_END
                        {: RESULT = new ComandoComposto(c); :} 
                    ;

comandos ::= 
                comandos:cs comando:c {: cs.add(c); RESULT = cs;:}
                | comando:c {: RESULT = new Comandos(c); :}
            ;  

comando ::= 
            casado:c        {: RESULT = c;  :}
            | nao_casado:nc {: RESULT = nc; :}
            | chamada_de_procedimento:cp SIMBOLOS_ESPECIAIS_PONTO_E_VIRGULA {: RESULT = cp; :}
        ;

casado ::= 
            comando_composto:cc {: RESULT = new Casado(cc); :}
            | atribuicao:a SIMBOLOS_ESPECIAIS_PONTO_E_VIRGULA {: RESULT = new Casado(a); :}
            | comando_condicional_casado:ccc {: RESULT = new Casado(ccc); :}
            | comando_repetitivo_casado:crp  {: RESULT = new Casado(crp); :}
        ;

comando_condicional_casado ::= 
                                PALAVRA_RESERVADA_IF expressao:e PALAVRA_RESERVADA_THEN 
                                casado:c
                                PALAVRA_RESERVADA_ELSE 
                                casado:c2

                                {: RESULT = new ComandoCondicionalCasado(e,c,c2); :}
                            ; 

nao_casado ::= 
                    PALAVRA_RESERVADA_IF expressao:e PALAVRA_RESERVADA_THEN 
                    comando:c

                    {: RESULT = new NaoCasado(e,c); :}

                    | PALAVRA_RESERVADA_IF expressao:e PALAVRA_RESERVADA_THEN 
                      casado:c 
                      PALAVRA_RESERVADA_ELSE 
                      nao_casado:nc

                      {: RESULT = new NaoCasado(e,c,nc); :}

                    | comando_repetitivo_nao_casado:crnc {: RESULT = new NaoCasado(crnc); :}
                ;


atribuicao ::= 
                error {: syntax_error("Erro na atribuição."); :} 
                | IDENTIFICADOR:i SIMBOLOS_ESPECIAIS_ATRIBUICAO expressao:e {: RESULT = new Atribuicao(i,e); :}
            ;

chamada_de_procedimento ::= 
                            IDENTIFICADOR:i
                            ABRE_PARENTESES lista_de_expressoes:le FECHA_PARENTESES 
                            {: RESULT = new ChamadaProcedimento(i,le); :}
                            | IDENTIFICADOR:i ABRE_PARENTESES FECHA_PARENTESES {: RESULT = new ChamadaProcedimento(i,null); :}
                        ;

lista_de_expressoes ::= 
                        expressao:e {: RESULT = new ListaExpressoes(e); :}
                        | lista_de_expressoes:le SIMBOLOS_ESPECIAIS_VIRGULA expressao:e {: le.add(e); RESULT = le; :}
                    ;

comando_repetitivo_casado ::= 
                                PALAVRA_RESERVADA_WHILE expressao:e PALAVRA_RESERVADA_DO 
                                casado:c
                                {: RESULT = new ComandoRepetitivoCasado(e,c); :}
                            ;

comando_repetitivo_nao_casado ::= 
                                PALAVRA_RESERVADA_WHILE expressao:e PALAVRA_RESERVADA_DO 
                                nao_casado:nc
                                {: RESULT = new ComandoRepetitivoNaoCasado(e,nc); :}

                            ;

//EXPRESSÕES

expressao ::= 
                  expressao_simples:e                                                              {: RESULT = new Expressao(e); :}
                | expressao_simples:e1 SIMBOLOS_ESPECIAIS_IGUAL expressao_simples:e2             {: RESULT = new Expressao(e1,Sym.SIMBOLOS_ESPECIAIS_IGUAL,e2); :}
                | expressao_simples:e1 SIMBOLOS_ESPECIAIS_MAIOR_OU_IGUAL expressao_simples:e2    {: RESULT = new Expressao(e1,Sym.SIMBOLOS_ESPECIAIS_MAIOR_OU_IGUAL,e2); :}
                | expressao_simples:e1 SIMBOLOS_ESPECIAIS_MAIOR_QUE expressao_simples:e2         {: RESULT = new Expressao(e1,Sym.SIMBOLOS_ESPECIAIS_MAIOR_QUE,e2); :}
                | expressao_simples:e1 SIMBOLOS_ESPECIAIS_DIFERENTE expressao_simples:e2         {: RESULT = new Expressao(e1,Sym.SIMBOLOS_ESPECIAIS_DIFERENTE,e2); :}
                | expressao_simples:e1 SIMBOLOS_ESPECIAIS_MENOR_OU_IGUAL expressao_simples:e2    {: RESULT = new Expressao(e1,Sym.SIMBOLOS_ESPECIAIS_MENOR_OU_IGUAL,e2); :}
                | expressao_simples:e1 SIMBOLOS_ESPECIAIS_MENOR_QUE expressao_simples:e2         {: RESULT = new Expressao(e1,Sym.SIMBOLOS_ESPECIAIS_MENOR_QUE,e2); :}
            ;

expressao_simples ::= 
                          termo:t repeticao_termo:rt {: RESULT = new ExpressaoSimples(t, rt); :}
                        | termo:t {: RESULT = new ExpressaoSimples(t); :}
                    ;

repeticao_termo ::= 
                      repeticao_termo:rt repeticao_termo2:rt2 {: rt.add(rt2); RESULT = rt; :}
                    | repeticao_termo2:rt2                    {: RESULT = new RepeticaoTermo(rt2); :}
                ;

repeticao_termo2 ::= 
                          OPERADOR_MATEMATICO_SOMA termo:t      {: RESULT = new RepeticaoTermo2(Sym.OPERADOR_MATEMATICO_SOMA,t); :} 
                        | OPERADOR_MATEMATICO_SUBTRACAO termo:t {: RESULT = new RepeticaoTermo2(Sym.OPERADOR_MATEMATICO_SUBTRACAO,t); :} 
                        | OPERADOR_LOGICO_OR termo:t            {: RESULT = new RepeticaoTermo2(Sym.OPERADOR_LOGICO_OR,t); :}
                    ;

termo ::=   
              fator:f repeticao_fator:rf {: RESULT = new Termo(f, rf); :}
            | fator:f                    {: RESULT = new Termo(f); :}
        ;

repeticao_fator ::= 
                      repeticao_fator:rf  repeticao_fator2:rf2    {: rf.add(rf2); RESULT = rf; :}
                    | repeticao_fator2:rf2                        {: RESULT = new RepeticaoFator(rf2); :}
                ;

repeticao_fator2 ::= 
                      OPERADOR_MATEMATICO_MULTIPLICACAO fator:f {: RESULT = new RepeticaoFator2(Sym.OPERADOR_MATEMATICO_MULTIPLICACAO,f); :}
                    | OPERADOR_MATEMATICO_DIVISAO fator:f       {: RESULT = new RepeticaoFator2(Sym.OPERADOR_MATEMATICO_DIVISAO,f); :}
                    | OPERADOR_LOGICO_AND fator:f               {: RESULT = new RepeticaoFator2(Sym.OPERADOR_LOGICO_AND,f); :}
                ;

fator ::= 
              VALOR_BOOLEANO:v                                {: RESULT = new Booleano(v); :}
            | IDENTIFICADOR:i                                 {: RESULT = new Identificador(i); :}
            | NUMERO_INTEIRO:n                                {: RESULT = new Numero(n); :}
            | ABRE_PARENTESES expressao:e FECHA_PARENTESES    {: RESULT = e; :}
            | OPERADOR_LOGICO_NOT fator:f                     {: RESULT = new NotFator(f); :}
        ;